// === Configuration Module ===
// C·∫•u h√¨nh k·∫øt n·ªëi ESP32

// ============================================
// ‚ö†Ô∏è C·∫§U H√åNH QUAN TR·ªåNG - ƒê·ªåC K·ª∏!
// ============================================

// üìç B∆∞·ªõc 1: L·∫•y IP c·ªßa ESP32
// - Upload code esp32_webserver.ino l√™n ESP32
// - M·ªü Serial Monitor (115200 baud)
// - T√¨m d√≤ng: "IP address: 192.168.1.XXX"
// - Copy IP ƒë√≥ v√†o d∆∞·ªõi ƒë√¢y

export const ESP32_IP = "192.168.1.100"; // ‚ö†Ô∏è THAY ƒê·ªîI IP N√ÄY!

// üé≠ B∆∞·ªõc 2: T·∫Øt DEMO MODE
// - DEMO_MODE = true  ‚Üí D·ªØ li·ªáu RANDOM (gi·∫£ l·∫≠p) ‚ùå
// - DEMO_MODE = false ‚Üí T·∫§T C·∫¢ t·ª´ ph·∫ßn c·ª©ng ESP32 ‚úÖ

export const DEMO_MODE = false; // ‚úÖ ƒê√É T·∫ÆT DEMO - T·∫§T C·∫¢ T·ª™ PH·∫¶N C·ª®NG!
// ‚ö†Ô∏è Khi DEMO_MODE = false:
//    - Nhi·ªát ƒë·ªô t·ª´ DS18B20 (GPIO4)
//    - Phao t·ª´ c·∫£m bi·∫øn (GPIO27)
//    - Pump state t·ª´ ESP32
//    - KH√îNG c√≥ gi√° tr·ªã m·∫∑c ƒë·ªãnh n√†o!

// ============================================
// Kh√¥ng c·∫ßn s·ª≠a ph·∫ßn d∆∞·ªõi
// ============================================

// Base URL cho API
export const API_BASE_URL = `http://${ESP32_IP}`;

// API Endpoints
export const API_ENDPOINTS = {
  status: `${API_BASE_URL}/api/status`,
  temperature: `${API_BASE_URL}/api/temperature`,
  pump: `${API_BASE_URL}/api/pump`,
  light: `${API_BASE_URL}/api/light`,
  feed: `${API_BASE_URL}/api/feed`,
};

// Polling interval (ms) - Update m·ªói 2 gi√¢y
export const POLLING_INTERVAL = 2000;
